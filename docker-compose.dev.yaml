services:
  redis:
    image: redis:7.2
    restart: unless-stopped
    container_name: redis
    command: redis-server --requirepass ${INGEST_REDIS_PASSWORD}
    ports:
       - 6379:6379
    networks:
      - uiuc-chat-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  qdrant:
    image: qdrant/qdrant:v1.9.0
    restart: unless-stopped
    container_name: qdrant
    # environment:
    #   - QDRANT_API_KEY=${QDRANT_API_KEY}
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
      - 6335
    volumes:
      - qdrant-data:/qdrant/storage
      - ./qdrant_config.yaml:/qdrant/config/production.yaml # Mount the config file directly as a volume
    networks:
      - uiuc-chat-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "-H", "Authorization: Bearer ${QDRANT_API_KEY}", "http://qdrant:6333/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    restart: unless-stopped
    container_name: minio
    # Customize env vars in .env file
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
      MINIO_API_PORT: ${DOCKER_INTERNAL_MINIO_API_PORT}
      MINIO_CONSOLE_PORT: ${DOCKER_INTERNAL_MINIO_DASHBOARD_PORT}
    command: server /data --console-address ":${DOCKER_INTERNAL_MINIO_DASHBOARD_PORT}" --address ":${DOCKER_INTERNAL_MINIO_API_PORT}"
    ports:
      - ${PUBLIC_MINIO_API_PORT}:${DOCKER_INTERNAL_MINIO_API_PORT} # API access
      - ${PUBLIC_MINIO_DASHBOARD_PORT}:${DOCKER_INTERNAL_MINIO_DASHBOARD_PORT} # Dashboard access
    expose:
      - ${PUBLIC_MINIO_API_PORT}
      - ${PUBLIC_MINIO_DASHBOARD_PORT}
    networks:
      - uiuc-chat-network
    volumes:
      - minio-data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://minio:${DOCKER_INTERNAL_MINIO_API_PORT}/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3

#  crawlee:
#    build: ./ic_crawlee
#    container_name: ic_crawlee
#    networks:
#      - uiuc-chat-network
#    volumes:
#      - ./data:/data
#    ports:
#      - "3345:3000"
#    env_file:
#      - .env
#    environment:
#      - INGEST_URL=http://flask-app:8001/ingest
#    depends_on:
#      - redis

  postgres-illinois-chat:
    image: postgres
    restart: unless-stopped
    networks:
      - uiuc-chat-network
    volumes:
      - postgres-illinois-chat:/var/lib/postgres/data
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password

  postgres-keycloak:
    image: postgres
    restart: unless-stopped
    networks:
      - uiuc-chat-network
    volumes:
      - postgres-keycloak:/var/lib/postgres/data
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 3s
      timeout: 10s
      retries: 3
    networks:
      - uiuc-chat-network
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  keycloak:
#    platform: linux/amd64  # M chip
    image: quay.io/keycloak/keycloak:26.1
    container_name: keycloak
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8080:8080"
    networks:
      - uiuc-chat-network
    command:
      - start-dev
      - --http-enabled=true
      - --hostname=localhost
      - --hostname-strict=false
      - --db=postgres
      - --db-url=jdbc:postgresql://postgres-keycloak:5432/postgres
      - --db-username=${POSTGRES_USER}
      - --db-password=${POSTGRES_PASSWORD}
      - --import-realm
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_METRICS_ENABLED=true
      - KC_HEALTH_ENABLED=true
    volumes:
      - ./keycloak-theme:/opt/keycloak/themes/keywind
      - ./keycloak/realms/realm-export.json:/opt/keycloak/data/import/realm-export.json
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://keycloak:8080/health/ready" ]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build:
      context: ./uiuc-chat-backend
      dockerfile: Self-Hosted-Dockerfile
    restart: unless-stopped
    networks:
      - uiuc-chat-network
    ports:
      - "8001:8001"
    depends_on:
      - rabbitmq
      - postgres-illinois-chat
    environment:
      RABBITMQ_URL: 'amqp://guest:guest@rabbitmq:5672'
      POSTGRES_HOST: postgres-illinois-chat
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      QDRANT_URL: "http://qdrant:6333"
      QDRANT_API_KEY: "your-strong-key-here"
      QDRANT_COLLECTION_NAME: illinois_chat
      MINIO_URL: http://minio:10000
      AWS_ACCESS_KEY_ID: "minioadmin"
      AWS_SECRET_ACCESS_KEY: "minioadmin"
      S3_BUCKET_NAME: uiuc-chat

# declare the network resource
# this will allow you to use service discovery and address a container by its name from within the network
networks:
  uiuc-chat-network:
    driver: bridge

volumes:
  redis-data: {}
  qdrant-data: {}
  minio-data: {}
  postgres-illinois-chat: {}
  postgres-keycloak: {}
  rabbitmq: {}
